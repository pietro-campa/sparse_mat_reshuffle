# -*- coding: utf-8 -*-
"""
Created on Wed Dec 14 09:12:53 2022

@author: campa
"""

import numpy as np
from scipy.sparse import csr_matrix

row = np.array([0, 0, 1, 2, 2, 2])
col = np.array([0, 2, 2, 0, 1, 2])
data = np.array([1, 2, 3, 4, 5, 6])


M = csr_matrix((data, (row, col)), shape=(3, 3))
del(col)
del(row)
del(data)

node_order = ['a', 'b', 'c']
node_order_M = ['b', 'c', 'a']

def sparse_swap(mat, nodes_right, nodes_wrong):
    """
    Parameters
    ----------
    mat : csr matrix
    nodes_right : a list with the desired ordering 
    nodes_wrong : a list with the current ordering

    Returns
    -------
    A new csr matrices where columns and rows have
    been reordered to match the ordering contained in 
    nodes_right.
    It requires to specify the current order of nodes.
    Created to rearrange adiacency Matrices in order
    to have them comparable across different layers of 
    the same graph.
    """
    shifter = []
    i = 0
    while i < len(nodes_wrong): 
        ind = nodes_right.index(nodes_wrong[i])
        S = ind - i
        shifter.append(S)
        i = i + 1
        
    cols = mat.indices.copy()
    i = 0
    while i < len(shifter): 
        new = i + shifter[i]
        cols[mat.indices == i] = new   
        i = i + 1
        
    mat.indices = cols
    
    mat = mat.tocsc()

    rows = mat.indices.copy()
    i = 0
    while i < len(shifter): 
        new = i + shifter[i]
        rows[mat.indices == i] = new   
        i = i + 1

    mat.indices = rows
    return mat

print(M.toarray())
Mnew = sparse_swap(M, node_order, node_order_M)
print(Mnew.toarray())
